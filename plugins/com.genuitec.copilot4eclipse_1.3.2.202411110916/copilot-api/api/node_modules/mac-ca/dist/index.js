"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.convert = exports.Format = exports.addToGlobalAgent = exports.get = void 0;
var https = require("https");
var tls_1 = require("tls");
var child_process_1 = require("child_process");
var undici_1 = require("undici");
var formatter_1 = require("./formatter");
Object.defineProperty(exports, "Format", { enumerable: true, get: function () { return formatter_1.Format; } });
Object.defineProperty(exports, "convert", { enumerable: true, get: function () { return formatter_1.convert; } });
var isMac = process.platform === 'darwin';
var globalAgent = https.globalAgent;
var getParamsDefaults = {
    keychain: 'all',
    unique: true,
    excludeBundled: true,
    format: formatter_1.Format.pem
};
function get(params) {
    if (params === void 0) { params = getParamsDefaults; }
    if (!isMac) {
        return [];
    }
    params = __assign(__assign({}, getParamsDefaults), params);
    var splitPattern = /(?=-----BEGIN\sCERTIFICATE-----)/g;
    var args = ['find-certificate', '-a', '-p'];
    var result = [];
    if (params.keychain === 'all' || params.keychain === 'SystemRootCertificates') {
        var systemRootCertsPath = '/System/Library/Keychains/SystemRootCertificates.keychain';
        var root = (0, child_process_1.spawnSync)('/usr/bin/security', args.concat(systemRootCertsPath))
            .stdout.toString()
            .split(splitPattern)
            .map(function (c) { return c.trim(); });
        result = __spreadArray(__spreadArray([], result, true), root, true);
    }
    if (params.keychain === 'all' || params.keychain === 'current') {
        var trusted = (0, child_process_1.spawnSync)('/usr/bin/security', args)
            .stdout.toString()
            .split(splitPattern)
            .map(function (c) { return c.trim(); });
        result = __spreadArray(__spreadArray([], result, true), trusted, true);
    }
    if (params.unique || params.excludeBundled) {
        var fingerprints_1 = result.map(function (c) { return (0, formatter_1.convert)(c, formatter_1.Format.fingerprint); });
        var nodeFingerprints_1 = params.excludeBundled ?
            tls_1.rootCertificates.map(function (c) { return (0, formatter_1.convert)(c, formatter_1.Format.fingerprint); }) :
            [];
        result = result.filter(function (pem, index) {
            var fingerprint = fingerprints_1[index];
            if (params.unique && index !== fingerprints_1.indexOf(fingerprint)) {
                return false;
            }
            if (params.excludeBundled && nodeFingerprints_1.includes(fingerprint)) {
                return false;
            }
            return true;
        });
    }
    return result.map(function (c) { return (0, formatter_1.convert)(c, params.format); });
}
exports.get = get;
;
var originalCA = globalAgent.options.ca;
var addToGlobalAgent = function (params) {
    if (params === void 0) { params = getParamsDefaults; }
    if (!isMac) {
        return;
    }
    var cas;
    if (!Array.isArray(originalCA)) {
        cas = typeof originalCA !== 'undefined' ? [originalCA] : [];
    }
    else {
        cas = Array.from(originalCA);
    }
    get(__assign(__assign(__assign({}, getParamsDefaults), params), { format: formatter_1.Format.pem, excludeBundled: false })).forEach(function (cert) { return cas.push(cert); });
    //Sets the root certs in https.globalAgent
    globalAgent.options.ca = cas;
    //Modify the https.Agent constructor so that each new instance of the agent
    //inherits the root certs from the global agent.
    // @ts-ignore
    https.Agent = (function (original) {
        return function (options) {
            var opts = typeof options !== 'undefined' ? __assign({}, options) : {};
            if (typeof opts.ca === 'undefined') {
                opts.ca = cas;
            }
            return original.call(this, opts);
        };
    })(https.Agent);
    //Sets the root certs in undici. This is what the new native "fetch" uses.
    (0, undici_1.setGlobalDispatcher)(new undici_1.Agent({
        connect: {
            ca: cas
        }
    }));
};
exports.addToGlobalAgent = addToGlobalAgent;
