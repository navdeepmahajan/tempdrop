"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.convert = exports.Format = void 0;
var forge = require("node-forge");
var Format;
(function (Format) {
    Format["der"] = "der";
    Format["pem"] = "pem";
    Format["txt"] = "txt";
    Format["asn1"] = "asn1";
    Format["x509"] = "x509";
    Format["fingerprint"] = "fingerprint";
})(Format = exports.Format || (exports.Format = {}));
;
function myASN(pem) {
    var der = forge.pki.pemToDer(pem);
    var asn1 = forge.asn1;
    // @ts-ignore
    var crt = asn1.fromDer(der.data.toString('binary')).value[0].value;
    var serial = crt[0];
    var hasSerial = serial.tagClass === asn1.Class.CONTEXT_SPECIFIC &&
        serial.type === 0 &&
        serial.constructed;
    var slicedCrt = crt.slice(hasSerial);
    return {
        serial: slicedCrt[0],
        issuer: slicedCrt[2],
        valid: slicedCrt[3],
        subject: slicedCrt[4],
    };
}
function txtFormat(pem) {
    var crt = myASN(pem);
    var subject = crt.subject.value
        // @ts-ignore
        .map(function (rdn) { return rdn.value[0].value[1].value; })
        .join('/');
    var valid = crt.valid.value
        // @ts-ignore
        .map(function (date) { return date.value; })
        .join(' - ');
    return [
        "Subject\t".concat(subject),
        "Valid\t".concat(valid),
        String(pem),
    ].join('\n');
}
function convert(pem, format) {
    switch (format) {
        case Format.der:
            return forge.pki.pemToDer(pem);
        case Format.pem:
            return pem;
        case Format.txt:
            return txtFormat(pem);
        case Format.asn1:
            return myASN(pem);
        case Format.fingerprint:
            var md = forge.md.sha1.create();
            var der = convert(pem, Format.der);
            md.update(der.getBytes());
            return md.digest().toHex();
        case Format.x509:
            return forge.pki.certificateFromPem(pem);
        default:
            throw new Error("unknown format ".concat(format));
    }
}
exports.convert = convert;
;
